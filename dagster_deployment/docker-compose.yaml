services:
  # PostgreSQL database for Dagster storage
  postgres:
    image: postgres:13
    container_name: dagster_postgres
    environment:
      POSTGRES_USER: 'postgres_user'
      POSTGRES_PASSWORD: 'postgres_password'
      POSTGRES_DB: 'postgres_db'
    networks:
      - dagster_network
    ports:
      - "5432:5432"
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres_user -d postgres_db']
      interval: 10s
      timeout: 8s
      retries: 5

  # User code container that runs the gRPC server
  usercode:
    build:
      context: .
      dockerfile: ./Dockerfile_code_location_1
    container_name: docker_example_user_code
    image: dagster_usercode_image
    restart: always
    env_file:
      - ${ENV_FILE_PATH:-.env}
    volumes:
      - ${CREDS_FILE_PATH:-./creds.json}:/opt/dagster/app/creds.json:ro
    networks:
      - dagster_network

  # Dagster webserver
  webserver:
    build:
      context: .
      dockerfile: ./Dockerfile_dagster
    entrypoint:
      - dagster-webserver
      - -h
      - '0.0.0.0'
      - -p
      - '3000'
      - -w
      - workspace.yaml
    container_name: dagster_webserver
    expose:
      - '3000'
    ports:
      - '3000:3000'
    env_file:
      - ${ENV_FILE_PATH:-.env}
    volumes: # Make docker client accessible so we can terminate containers from the webserver
      - /var/run/docker.sock:/var/run/docker.sock
      - /tmp/io_manager_storage:/tmp/io_manager_storage
    networks:
      - dagster_network
    depends_on:
      postgres:
        condition: service_healthy
      usercode:
        condition: service_started

  # Dagster daemon process
  daemon:
    build:
      context: .
      dockerfile: ./Dockerfile_dagster
    entrypoint:
      - dagster-daemon
      - run
    container_name: dagster_daemon
    restart: on-failure
    env_file:
      - ${ENV_FILE_PATH:-.env}
    volumes: # Make docker client accessible so we can launch containers using host docker
      - /var/run/docker.sock:/var/run/docker.sock
      - /tmp/io_manager_storage:/tmp/io_manager_storage
    networks:
      - dagster_network
    depends_on:
      postgres:
        condition: service_healthy
      usercode:
        condition: service_started

networks:
  dagster_network:
    driver: bridge
    name: dagster_network
